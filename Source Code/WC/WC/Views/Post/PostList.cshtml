@using System.Web.UI.WebControls
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.Owin
@using WC.Models
@{ var currentUserId = User.Identity.GetUserId(); }
@model List<WC.Data.Post>

<style type="text/css">
    .post-block {
        padding: 0 !important;
    }

    .post-block .post-header {
        padding: 20px !important;
    }

    .post-block .post-content {
        padding: 0 20px !important;
    }

    .post-block .post-comment {
        padding: 20px !important;
        background-color: #f6f7f8;
    }

    .profile-timeline ul li .timeline-item-post {
        padding: 0;
    }

    .profile-timeline ul li .timeline-item-header {
        overflow: visible;
    }
        .profile-timeline ul li .timeline-item-header small a {
            color: #8E8E8E;
        }

    .timeline-comment .timeline-comment-header p {
        padding: 0 5px 5px 0;
        text-align: justify;
    }

    .timeline-comment {
        border-bottom: none;
    }

    .timeline-options {
        border-bottom: none;
        margin-bottom: 0;
    }

    .timeline-options a {
        color: #337ab7;
    }

    .comment-like {
        padding-left: 40px;
        padding-right: 5px;
    }

    a.comment-like {
        text-decoration: none;
    }

    a.comment-like:hover {
        color: #22BAA0;
    }

    small {
        color: #9197a3;
    }

    .remove-content {
        -ms-border-radius: 4px;
        border-radius: 4px;
        -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);
        -ms-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);
        box-shadow: 0 6px 12px rgba(0, 0, 0, .175);
    }

    .remove-content:before, .remove-content:after {
        content: none;
    }

    .post-dropdown-caret {
        top: -25px;
    }

    .dropdown-menu {
        -moz-min-width: 100px;
        -ms-min-width: 100px;
        -o-min-width: 100px;
        -webkit-min-width: 100px;
        min-width: 100px;
    }

    .modal-header {
        -ms-border-radius: 6px 6px 0 0;
        border-radius: 6px 6px 0 0;
        background-color: #f6f7f8;
    }

    .timeline-comment, .timeline-comment .timeline-comment-header {
        overflow: visible;
        min-height: 10px;
    }

    .clear {
        clear: both;
    }
    .no-decoration, .no-decoration:hover {
        text-decoration: none;
        cursor: default;
    }
</style>

<script>
    function pasteIntoInput(el, text) {
        el.focus();
        if (typeof el.selectionStart == "number"
            && typeof el.selectionEnd == "number") {
            var val = el.value;
            var selStart = el.selectionStart;
            el.value = val.slice(0, selStart) + text + val.slice(el.selectionEnd);
            el.selectionEnd = el.selectionStart = selStart + text.length;
        } else if (typeof document.selection != "undefined") {
            var textRange = document.selection.createRange();
            textRange.text = text;
            textRange.collapse(false);
            textRange.select();
        }
    }

    $(document).ready(function() {

        //focus on comment text box when click on Comment text
        $(document).on('click', '.comment-text', function() {
            var postId = $(this).attr("post-id");
            $('#comment-area-' + postId).focus();
            return false;
        });

        //auto submit comment when user press enter, add new line if Shift+Enter
        $(document).on('keydown', '.comment-form', function(e) {
            if (e.which === 13) {
                if (e.shiftKey === false) {
                    var url = '@Url.Action("PostComment", "Post")';
                    var text = $(this).val();
                    var textbox = $(this);
                    var postid = $(this).attr("post-id");
                    if (text === "") return;

                    $.post(url, { "postId": postid, "content": text },
                        function(data) {
                            if (data === "Failed") {
                                alert("Unable to post your comment. Please try again later. Thank you!");
                            } else {
                                var countItem = document.getElementById("comment-count-" + postid);
                                var count = parseInt(countItem.textContent) + 1;
                                countItem.textContent = count;

                                var commentList = $("#comment-list-" + postid);
                                commentList.append(data);
                                textbox.val('');
                            }
                        });
                } else {
                    pasteIntoInput(this, "\n");
                    e.preventDefault();
                }
            }
        });

        //like/unlike and update like count
        $(document).on('click', '.post-like', function() {
            var curElement = $(this);
            var postid = $(this).attr("post-id");
            var isLike = $(this).attr("data-toogle") === "Like";
            var url = '@Url.Action("LikeUnlikePost", "Post")';

            $.post(url, { "postId": postid, "isLike": isLike },
                function(data) {
                    if (data === "Failed") {
                        alert("Unable to peform your action. This item has been removed.");
                    } else {
                        var countItem = document.getElementById("post-like-count-" + postid);
                        var count = data;

                        if (isLike) {
                            curElement.attr("data-toogle", "Unlike");
                        } else {
                            curElement.attr("data-toogle", "Like");
                        }
                        countItem.textContent = count;

                        var likeStatus = document.getElementById("post-like-status-" + postid);
                        likeStatus.innerHTML = curElement.attr("data-toogle");
                    }
                });
            return false;
        });

        //like/unlike and update like count
        $(document).on('click', '.comment-like', function() {
            var curElement = $(this);
            var commentid = $(this).attr("comment-id");
            var isLike = $(this).attr("data-toogle") === "Like";
            var url = '@Url.Action("LikeUnlikeComment", "Post")';

            $.post(url, { "commentId": commentid, "isLike": isLike },
                function(data) {
                    if (data === "Failed") {
                        alert("Unable to peform your action. This item has been removed.");
                    } else {
                        var countItem = document.getElementById("comment-like-count-" + commentid);
                        var count = data;

                        if (isLike) {
                            curElement.attr("data-toogle", "Unlike");
                        } else {
                            curElement.attr("data-toogle", "Like");
                        }
                        countItem.textContent = count;

                        var likeStatus = document.getElementById("comment-like-status-" + commentid);
                        likeStatus.innerHTML = curElement.attr("data-toogle");
                    }
                });
            return false;
        });

        //Show edit modal dialog
        $(document).on('click', '.edit-command', function() {
            var recipient = $(this).data('id');
            var actionType = $(this).data('type');
            $("#button-edit").data('id', recipient);
            $("#button-edit").data('type', actionType);

            var title = $('#edit-modal-label');
            title.text('Edit ' + actionType);


            if (actionType === "Post") {
                var postUrl = '@Url.Action("EditPost", "Post")';


                $.post(postUrl, { "postId": recipient },
                    function(data) {
                        if (data === "Failed") {
                            alert("Unable to edit this post. Please try again later.");
                        } else if (data === "Deleted") {
                            alert("This post has already been deleted.");
                        } else {
                            var content = $('#message-text');
                            content.val(data);
                            content.css('min-height', '50px').autogrow();
                        }
                    });
            } else {
                var commentUrl = '@Url.Action("EditComment", "Post")';

                $.post(commentUrl, { "commentId": recipient },
                    function(data) {
                        if (data === "Failed") {
                            alert("Unable to edit this comment. Please try again later.");
                        } else if (data === "Deleted") {
                            alert("This comment has already been deleted.");
                        } else {
                            var content = $('#message-text');
                            content.val(data);
                            content.css('min-height', '50px').autogrow();
                        }
                    });
            }
        });

        //update post/comment
        $("#button-edit").click(function() {
            var recipient = $(this).data('id');
            var actionType = $(this).data('type');
            var content = $('#message-text').val();

            if (actionType === "Post") {
                var postUrl = '@Url.Action("UpdatePost", "Post")';

                $.post(postUrl, { "postId": recipient, "content": content },
                    function(data) {
                        if (data === "Failed") {
                            alert("Unable to edit this post. Please try again later.");
                        } else if (data === "Deleted") {
                            alert("This post has already been deleted.");
                        } else {
                            var editedContent = $('#post-edit-' + recipient);
                            editedContent.text(content);
                        }
                    });
            } else {
                var commentUrl = '@Url.Action("UpdateComment", "Post")';

                $.post(commentUrl, { "commentId": recipient, "content": content },
                    function(data) {
                        if (data === "Failed") {
                            alert("Unable to edit this comment. Please try again later.");
                        } else if (data === "Deleted") {
                            alert("This comment has already been deleted.");
                        } else {
                            var editedContent = $('#comment-edit-' + recipient);
                            editedContent.text(content);
                        }
                    });
            }
            $("#button-edit-close").click();
        });

        //call confirm delete post
        $(document).on('click', '.delete-post-command', function() {
            var postid = $(this).attr("post-id");
            $('#button-post-delete').attr('post-id', postid);
        });

        //delete post
        $('#button-post-delete').click(function() {
            var postid = $(this).attr("post-id");
            var url = '@Url.Action("DeletePost", "Post")';

            $.post(url, { "postId": postid },
                function(data) {
                    if (data === "Failed") {
                        alert("Unable to delete this post. Please try again later.");
                    } else if (data === "Deleted") {
                        alert("This post has already been deleted.");
                    } else {
                        $('#button-post-close').click();
                        var element = document.getElementById('post-block-' + postid);
                        element.parentNode.removeChild(element);
                    }
                });
        });

        //call confirm delete commment dialog
        $(document).on('click', '.delete-comment-command', function() {
            var commentid = $(this).attr("comment-id");
            $('#button-comment-delete').attr('comment-id', commentid);
        });

        //delete comment
        $('#button-comment-delete').click(function() {
            var commentid = $(this).attr("comment-id");
            var url = '@Url.Action("DeleteComment", "Post")';

            $.post(url, { "commentId": commentid },
                function(data) {
                    if (data === "Failed") {
                        alert("Unable to delete this comment. Please try again later.");
                    } else if (data === "Deleted") {
                        alert("This comment has already been deleted.");
                    } else {
                        $('#button-comment-close').click();
                        $('#comment-block-' + commentid).remove();
                        var countItem = document.getElementById("comment-count-" + data);
                        var count = parseInt(countItem.textContent) - 1;
                        countItem.textContent = count;
                    }
                });
        });
    });
               </script>

<div class="modal fade" id="delete-post-modal" tabindex="-1" role="dialog" aria-labelledby="myModalPostLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalPostLabel">Delete Post</h4>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="button-post-close" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-facebook" id="button-post-delete" post-id="">Delete Post</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="modal fade" id="delete-comment-modal" tabindex="-1" role="dialog" aria-labelledby="myModalCommentLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalCommentLabel">Delete Comment</h4>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="button-comment-close" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-facebook" id="button-comment-delete" comment-id="">Delete Comment</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="modal fade" id="edit-modal" tabindex="-1" role="dialog" aria-labelledby="edit-modal-label">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="edit-modal-label">Edit</h4>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <textarea class="form-control" id="message-text"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="button-edit-close" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="button-edit" class="btn btn-facebook" data-type="" data-id="">Save changes</button>
            </div>
        </div>
    </div>
</div>

@foreach (var item in Model)
{
    var isPoster = item.UserID.Equals(currentUserId, StringComparison.InvariantCultureIgnoreCase);
    var isOwner = item.PostedOn.Equals(currentUserId, StringComparison.InvariantCultureIgnoreCase);
    var alreadyLike = item.PostLikes.Any(x => x.UserID == currentUserId)
        ? "Unlike"
        : "Like";

    <li id="post-block-@item.PostID" class="timeline-item">
        <div class="panel panel-white">
            <div class="panel-body post-block">
                <div class="timeline-item-header post-header">
                    <img src="@Url.Content(item.User.Profile_Photo.ProfileImageUrl)" alt="">
                    <p>
                        <a href="@Url.Action(item.User.UserName, "Profile")">@item.User.FirstName @item.User.LastName</a>
                        @if (!item.UserID.Equals(item.PostedOn, StringComparison.InvariantCultureIgnoreCase))
                        {
                            <a class="no-decoration">&nbsp;<i class="fa fa-arrow-right"></i>&nbsp;</a>
                            <a href="@Url.Action(item.User1.UserName, "Profile")">@item.User1.FirstName @item.User1.LastName</a>
                        }
                    </p>
                    <small><a href="@Url.Action(item.PostID, "Posts")">@item.PostedDate</a></small>
                    <div class="dropdown post-dropdown-caret pull-right">
                        <a id="drop-@item.PostID" href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu remove-content pull-left" aria-labelledby="drop-@item.PostID">
                            @if (isPoster)
                            {
                                <li><a href="#" data-toggle="modal" data-target="#edit-modal" data-type="Post" data-id="@item.PostID" class="edit-command"><span class="glyphicon glyphicon-pencil"></span>&nbsp;&nbsp;Edit Post</a></li>
                            }
                            @if (isOwner || isPoster)
                            {
                                <li><a href="#" data-toggle="modal" data-target="#delete-post-modal" class="delete-post-command" post-id="@item.PostID"><span class="glyphicon glyphicon-remove"></span>&nbsp;&nbsp;Delete</a></li>
                            }
                            @if ((isOwner || isPoster) && !isPoster)
                            {
                                <li role="separator" class="divider"></li>
                            }
                            @if (!isPoster)
                            {
                                <li><a href="#" class="report-post-command" post-id="@item.PostID"><span class="glyphicon glyphicon-flag"></span>&nbsp;&nbsp;Report...</a></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="timeline-item-post">
                    <div class="post-content">
                        <div id="post-content-@item.PostID">
                            <p id="post-edit-@item.PostID" style="white-space: pre-line">@item.PostContent</p>
                        </div>
                        <div class="timeline-options">
                            <a class="post-like" href="#" post-id="@item.PostID" data-toogle="@alreadyLike">
                                <i class="icon-like"></i>
                                <span id="post-like-status-@item.PostID">@alreadyLike</span> (<span id="post-like-count-@item.PostID">@item.PostLikes.Count</span>)
                            </a>
                            <a href="#" class="comment-text" post-id="@item.PostID"><i class="icon-bubble"></i> Comment (<span id="comment-count-@item.PostID">@item.Comments.Count</span>)</a>
                        </div>
                    </div>
                    <div class="post-comment">
                        <div id="comment-list-@item.PostID">
                            @if (item.Comments.Count > 0)
                            {
                                var comments = item.Comments.OrderBy(x => x.CommentedDate);
                                //Html.RenderAction("CommentList", "Home", new { Model = item.Comments as List<WC.Data.Comment> });
                                foreach (var comment in comments)
                                {
                                    var isCommenter = comment.UserID.Equals(currentUserId, StringComparison.InvariantCultureIgnoreCase);
                                    var commentAlreadyLike = comment.CommentLikes.Any(x => x.UserID == User.Identity.GetUserId())
                                                        ? "Unlike"
                                                        : "Like";
                                    <div id="comment-block-@comment.CommentID" class="timeline-comment">
                                        <div class="timeline-comment-header">
                                            <img src="@Url.Content(comment.User.Profile_Photo.ProfileImageUrl)" alt="">
                                            <p>
                                                <a href="@Url.Action(comment.User.UserName, "Profile")">@comment.User.FirstName @comment.User.LastName</a> <span id="comment-edit-@comment.CommentID" style="white-space: pre-line; font-weight: 400">@comment.CommentContent</span>
                                            </p>
                                            <div class="dropdown dropdown-caret pull-right">
                                                <a id="drop-@comment.CommentID" href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                                    <span class="caret"></span>
                                                </a>
                                                <ul class="dropdown-menu remove-content pull-left" aria-labelledby="drop-@comment.CommentID">
                                                    @if (isCommenter)
                                                    {
                                                        <li><a href="#" data-toggle="modal" data-target="#edit-modal" data-type="Comment" class="edit-command" data-id="@comment.CommentID"><span class="glyphicon glyphicon-pencil"></span>&nbsp;&nbsp;Edit Comment</a></li>
                                                    }
                                                    @if (isOwner || isCommenter)
                                                    {
                                                        <li><a href="#" data-toggle="modal" data-target="#delete-comment-modal" class="delete-comment-command" comment-id="@comment.CommentID"><span class="glyphicon glyphicon-remove"></span>&nbsp;&nbsp;Delete</a></li>
                                                    }
                                                    @if ((isOwner || isCommenter) && !isCommenter)
                                                    {
                                                        <li role="separator" class="divider"></li>
                                                    }
                                                    @if (!isCommenter)
                                                    {
                                                        <li><a href="#" class="report-comment-command" comment-id="@comment.CommentID"><span class="glyphicon glyphicon-flag"></span>&nbsp;&nbsp;Report...</a></li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="clear"></div>
                                        <a class="comment-like" href="#" comment-id="@comment.CommentID" data-toogle="@commentAlreadyLike">
                                            <span id="comment-like-status-@comment.CommentID">@commentAlreadyLike</span> (<span id="comment-like-count-@comment.CommentID">@comment.CommentLikes.Count</span>)
                                        </a><small>@comment.CommentedDate</small>
                                    </div>
                                }
                            }
                        </div>
                        <textarea class="form-control comment-form" id="comment-area-@item.PostID" post-id="@item.PostID" placeholder="Write a comment..."></textarea>
                    </div>
                </div>
            </div>
        </div>
    </li>
}

